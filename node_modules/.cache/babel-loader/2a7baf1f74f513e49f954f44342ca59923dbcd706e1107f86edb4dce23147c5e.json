{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nlet openMenus = [];\nexport function toggleMenu(menuId) {\n  var menu = document.getElementById(menuId);\n  if (menu) {\n    const isOpen = menu.classList.contains(\"open\");\n\n    // Закрываем все открытые меню, кроме текущего\n    openMenus.forEach(openMenuId => {\n      if (openMenuId !== menuId) {\n        const openMenu = document.getElementById(openMenuId);\n        if (openMenu) {\n          openMenu.classList.remove(\"open\");\n          openMenu.style.display = \"none\";\n        }\n      }\n    });\n\n    // Если меню не открыто, открываем его\n    if (!isOpen) {\n      menu.classList.add(\"open\");\n      openMenus.push(menuId);\n      menu.style.display = \"block\";\n\n      // Добавляем обработчик для закрытия меню при клике вне него\n      document.addEventListener(\"click\", closeMenuHandler);\n    } else {\n      // Если меню уже открыто, закрываем его\n      menu.classList.remove(\"open\");\n      openMenus = openMenus.filter(openMenuId => openMenuId !== menuId);\n      menu.style.display = \"none\";\n\n      // Удаляем обработчик при закрытии меню\n      document.removeEventListener(\"click\", closeMenuHandler);\n    }\n  }\n}\nfunction closeMenuHandler(event) {\n  // Проверяем, был ли клик вне открытых меню, но не внутри самого меню\n  if (!openMenus.some(menuId => document.getElementById(menuId).contains(event.target))) {\n    openMenus.forEach(openMenuId => {\n      const openMenu = document.getElementById(openMenuId);\n      if (openMenu) {\n        openMenu.classList.remove(\"open\");\n        openMenu.style.display = \"none\";\n      }\n    });\n\n    // Удаляем обработчик после закрытия всех меню\n    document.removeEventListener(\"click\", closeMenuHandler);\n  }\n}","map":{"version":3,"names":["openMenus","toggleMenu","menuId","menu","document","getElementById","isOpen","classList","contains","forEach","openMenuId","openMenu","remove","style","display","add","push","addEventListener","closeMenuHandler","filter","removeEventListener","event","some","target"],"sources":["/var/www/cosmo/src/components/header/language-currency.js"],"sourcesContent":["let openMenus = [];\n\nexport function toggleMenu(menuId) {\n  var menu = document.getElementById(menuId);\n\n  if (menu) {\n    const isOpen = menu.classList.contains(\"open\");\n\n    // Закрываем все открытые меню, кроме текущего\n    openMenus.forEach((openMenuId) => {\n      if (openMenuId !== menuId) {\n        const openMenu = document.getElementById(openMenuId);\n        if (openMenu) {\n          openMenu.classList.remove(\"open\");\n          openMenu.style.display = \"none\";\n        }\n      }\n    });\n\n    // Если меню не открыто, открываем его\n    if (!isOpen) {\n      menu.classList.add(\"open\");\n      openMenus.push(menuId);\n      menu.style.display = \"block\";\n\n      // Добавляем обработчик для закрытия меню при клике вне него\n      document.addEventListener(\"click\", closeMenuHandler);\n    } else {\n      // Если меню уже открыто, закрываем его\n      menu.classList.remove(\"open\");\n      openMenus = openMenus.filter((openMenuId) => openMenuId !== menuId);\n      menu.style.display = \"none\";\n\n      // Удаляем обработчик при закрытии меню\n      document.removeEventListener(\"click\", closeMenuHandler);\n    }\n  }\n}\n\nfunction closeMenuHandler(event) {\n  // Проверяем, был ли клик вне открытых меню, но не внутри самого меню\n  if (!openMenus.some((menuId) => document.getElementById(menuId).contains(event.target))) {\n    openMenus.forEach((openMenuId) => {\n      const openMenu = document.getElementById(openMenuId);\n      if (openMenu) {\n        openMenu.classList.remove(\"open\");\n        openMenu.style.display = \"none\";\n      }\n    });\n\n    // Удаляем обработчик после закрытия всех меню\n    document.removeEventListener(\"click\", closeMenuHandler);\n  }\n}\n"],"mappings":";AAAA,IAAIA,SAAS,GAAG,EAAE;AAElB,OAAO,SAASC,UAAUA,CAACC,MAAM,EAAE;EACjC,IAAIC,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAACH,MAAM,CAAC;EAE1C,IAAIC,IAAI,EAAE;IACR,MAAMG,MAAM,GAAGH,IAAI,CAACI,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC;;IAE9C;IACAR,SAAS,CAACS,OAAO,CAAEC,UAAU,IAAK;MAChC,IAAIA,UAAU,KAAKR,MAAM,EAAE;QACzB,MAAMS,QAAQ,GAAGP,QAAQ,CAACC,cAAc,CAACK,UAAU,CAAC;QACpD,IAAIC,QAAQ,EAAE;UACZA,QAAQ,CAACJ,SAAS,CAACK,MAAM,CAAC,MAAM,CAAC;UACjCD,QAAQ,CAACE,KAAK,CAACC,OAAO,GAAG,MAAM;QACjC;MACF;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACR,MAAM,EAAE;MACXH,IAAI,CAACI,SAAS,CAACQ,GAAG,CAAC,MAAM,CAAC;MAC1Bf,SAAS,CAACgB,IAAI,CAACd,MAAM,CAAC;MACtBC,IAAI,CAACU,KAAK,CAACC,OAAO,GAAG,OAAO;;MAE5B;MACAV,QAAQ,CAACa,gBAAgB,CAAC,OAAO,EAAEC,gBAAgB,CAAC;IACtD,CAAC,MAAM;MACL;MACAf,IAAI,CAACI,SAAS,CAACK,MAAM,CAAC,MAAM,CAAC;MAC7BZ,SAAS,GAAGA,SAAS,CAACmB,MAAM,CAAET,UAAU,IAAKA,UAAU,KAAKR,MAAM,CAAC;MACnEC,IAAI,CAACU,KAAK,CAACC,OAAO,GAAG,MAAM;;MAE3B;MACAV,QAAQ,CAACgB,mBAAmB,CAAC,OAAO,EAAEF,gBAAgB,CAAC;IACzD;EACF;AACF;AAEA,SAASA,gBAAgBA,CAACG,KAAK,EAAE;EAC/B;EACA,IAAI,CAACrB,SAAS,CAACsB,IAAI,CAAEpB,MAAM,IAAKE,QAAQ,CAACC,cAAc,CAACH,MAAM,CAAC,CAACM,QAAQ,CAACa,KAAK,CAACE,MAAM,CAAC,CAAC,EAAE;IACvFvB,SAAS,CAACS,OAAO,CAAEC,UAAU,IAAK;MAChC,MAAMC,QAAQ,GAAGP,QAAQ,CAACC,cAAc,CAACK,UAAU,CAAC;MACpD,IAAIC,QAAQ,EAAE;QACZA,QAAQ,CAACJ,SAAS,CAACK,MAAM,CAAC,MAAM,CAAC;QACjCD,QAAQ,CAACE,KAAK,CAACC,OAAO,GAAG,MAAM;MACjC;IACF,CAAC,CAAC;;IAEF;IACAV,QAAQ,CAACgB,mBAAmB,CAAC,OAAO,EAAEF,gBAAgB,CAAC;EACzD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}